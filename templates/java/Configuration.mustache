{{>licenseInfo}}

package {{invokerPackage}};

{{>generatedAnnotation}}
public class Configuration {
    private static ApiClient defaultApiClient = new ApiClient();

    /**
     * Get the default API client, which would be used when creating API
     * instances without providing an API client.
     *
     * @return Default API client
     */
    public static ApiClient getDefaultApiClient() {
        return defaultApiClient;
    }

    /**
     * Set the default API client, which would be used when creating API
     * instances without providing an API client.
     *
     * @param apiClient API client
     */
    public static void setDefaultApiClient(ApiClient apiClient) {
        defaultApiClient = apiClient;
    }

    public static ApiClient getDefaultApiClient(String cloudinaryUrl) {
        updateClient(parseConfigUrl(cloudinaryUrl));
        return defaultApiClient;
    }

    static private void updateClient(Map config) {
        HttpBasicAuth basicAuth = (HttpBasicAuth) defaultApiClient.getAuthentication("basicAuth");
        basicAuth.setUsername((String) config.get("api_key"));
        basicAuth.setPassword((String) config.get("api_secret"));
        buildCloudinaryUrl((String) config.get("cloud_name"));
    }

    static private void buildCloudinaryUrl(String cloudName) {
        defaultApiClient.setBasePath("https://api-staging.cloudinary.com/v2/" + cloudName);
    }

    static protected Map parseConfigUrl(String cloudinaryUrl) {
        Map params = new HashMap();
        URI cloudinaryUri = URI.create(cloudinaryUrl);
        if (cloudinaryUri.getScheme() == null || !cloudinaryUri.getScheme().equalsIgnoreCase("cloudinary")){
            throw new IllegalArgumentException("Invalid CLOUDINARY_URL scheme. Expecting to start with 'cloudinary://'");
        }
        params.put("cloud_name", cloudinaryUri.getHost());
        if (cloudinaryUri.getUserInfo() != null) {
            String[] creds = cloudinaryUri.getUserInfo().split(":");
            params.put("api_key", creds[0]);
            if (creds.length > 1) {
                params.put("api_secret", creds[1]);
            }
        }
        params.put("private_cdn", !StringUtils.isEmpty(cloudinaryUri.getPath()));
        params.put("secure_distribution", cloudinaryUri.getPath());
        updateMapfromURI(params, cloudinaryUri);
        return params;
    }

    static private void updateMapfromURI(Map params, URI cloudinaryUri) {
        if (cloudinaryUri.getQuery() != null) {
            for (String param : cloudinaryUri.getQuery().split("&")) {
                String[] keyValue = param.split("=");
                try {
                    final String value = URLDecoder.decode(keyValue[1], "ASCII");
                    final String key = keyValue[0];
                    if(isNestedKey(key)) {
                        putNestedValue(params, key, value);
                    } else {
                        params.put(key, value);
                    }
                } catch (UnsupportedEncodingException e) {
                    throw new RuntimeException("Unexpected exception", e);
                }
            }
        }
    }

    static private void putNestedValue(Map params, String key, String value) {
        String[] chain = key.split("[\\[\\]]+");
        Map outer = params;
        String innerKey = chain[0];
        for (int i = 0; i < chain.length -1; i++, innerKey = chain[i]) {
            Map inner = (Map) outer.get(innerKey);
            if (inner == null) {
                inner = new HashMap();
                outer.put(innerKey, inner);
            }
        outer = inner;
        }
    outer.put(innerKey, value);
    }

    static private boolean isNestedKey(String key) {
        return key.matches("\\w+\\[\\w+\\]");
    }
}
